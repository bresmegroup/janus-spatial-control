%Function that find the wavelength of maximum absorption and the heat
%generated by its absorption.

%Needs the function mie.m and mie_abcd.m which have been written by C.
%Matzler, Institute of Applied Physics, University of Bern 2002.
%Mätzler, C.. “MATLAB Functions for Mie Scattering and Absorption.” (2002).
%Available at https://scattport.org/index.php/programs-menu/mie-type-codes-menu/111-mie-matlab-maetzler

clear all
close all

I0 = 1e5*1e-14; %W/nm^2
lambda = linspace(300,800,501); %nm
r = 50; %nm

[Qabs,Qeff] = calculate_heat(I0,lambda,r);

[Q_max, loc_max] = max(Qabs);
lambda_max = lambda(loc_max);

figure
hold on
plot(lambda,Qabs*1e6)
xlabel('Wavelength [nm]')
ylabel('Heat generated [\muW]')


%Define the thermal conductivities
k2 = 0.45; %W/m/K
k3 = 0.60; %W/m/K

%Define the Au-Th thermal conductance
G12 = 800e6; %W/m^2/K

%Define the Th-W thermal conductance
G23a = linspace(10,1000,495)*1e6; %W/m^2/K
G23b = linspace(10,1000,495)*1e6; %W/m^2/K

%Define the interfacial positions.
r1 = r*1e-9; %m
r2 = r1+1e-9; %m
r3 = r1*100; %m

%Compute the temperature increase for each hemisphere.
DTa = temperature_increase(Q_max,k2,k3,G12,G23a,r1,r2,r3);
DTb = temperature_increase(Q_max,k2,k3,G12,G23b,r1,r2,r3);

%Harmonic mean for the Janus particle.
DTj = 2./(1./DTa+1./DTb');

%Define the heat rates for each hemisphere.
Qa = Q_max./(1+DTa./DTb');
Qb = Q_max./(1+DTb'./DTa);

Qtot = Qa+Qb;

%Compute the interfacial temperatures.
ITa = interfacial_temperature(Qa,k3,r2,r3);
ITb = interfacial_temperature(Qb,k3,r2,r3);
contrast = abs(ITa-ITb);


%%

[X,Y] = meshgrid(G23a,G23b);
X = X/1e6;
Y = Y/1e6;

figure
contourf(X,Y,contrast,'ShowText','on')
line([X(1,1) Y(90,90)], [X(1,1) Y(90,90)],'Color','Black')
line([X(120,120) Y(end,end)], [X(120,120) Y(end,end)],'Color','Black')
text(X(100,100),Y(100,100),num2str(contrast(100,100)))
ylabel('G_{23}^{B} [MW/(m^2 K)]')
xlabel('G_{23}^{A} [MW/(m^2 K)]')
title('Temperature contrast [K]')
ax = gca;
ax.XAxis.Scale = 'log';
ax.YAxis.Scale = 'log';
colormap(flipud(autumn))
% caxis([0 20])
saveas(gca,sprintf('contrast_gmon_%1.0e_%i.eps',I0/1e-14,r),'epsc')

figure
contourf(X,Y,DTj,'ShowText','on')
ylabel('G_{23}^{B} [MW/(m^2 K)]')
xlabel('G_{23}^{A} [MW/(m^2 K)]')
title('\DeltaT [K]')
ax = gca;
ax.XAxis.Scale = 'log';
ax.YAxis.Scale = 'log';
colormap(flipud(autumn))
% caxis([0 20])
saveas(gca,sprintf('increase_gmon_%1.0e_%i.eps',I0/1e-14,r),'epsc')

figure
[C,h] = contourf(X,Y,ITa+300,'ShowText','on');
h.LevelList = [h.LevelList ITa(1,1)+300];
ylabel('G_{23}^{B} [MW/(m^2 K)]')
xlabel('G_{23}^{A} [MW/(m^2 K)]')
title('T_{int}^{A} [K]')
ax = gca;
ax.XAxis.Scale = 'log';
ax.YAxis.Scale = 'log';
colormap(flipud(autumn))
% caxis([0 20])
saveas(gca,sprintf('interfacial_gmon_%1.0e_%i.eps',I0/1e-14,r),'epsc')

figure
[C,h] = contourf(X,Y,ITb+300,'ShowText','on');
h.LevelList = [h.LevelList ITb(1,1)+300];
ylabel('G_{23}^{B} [MW/(m^2 K)]')
xlabel('G_{23}^{A} [MW/(m^2 K)]')
title('T_{int}^{B} [K]')
ax = gca;
ax.XAxis.Scale = 'log';
ax.YAxis.Scale = 'log';
colormap(flipud(autumn))
% caxis([0 20])
saveas(gca,sprintf('interfacialB_gmon_%1.0e_%i.eps',I0/1e-14,r),'epsc')

%%

function DT = temperature_increase(Q,k2,k3,G12,G23,r1,r2,r3)
DT = Q/(4*pi)*(1/k2*(1/r1-1/r2)+1/k3*(1/r2-1/r3)+1./(r1^2.*G12)+1./(r2^2.*G23));
end

function IT = interfacial_temperature(Q,k3,r2,r3)
IT = Q/(2*pi)*(1/k3*(1/r2-1/r3));
end